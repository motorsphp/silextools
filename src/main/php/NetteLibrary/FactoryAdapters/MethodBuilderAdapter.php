<?php namespace Motorphp\SilexTools\NetteLibrary\FactoryAdapters;

use Motorphp\SilexTools\Bootstrap\BootstrapBuilder;
use Motorphp\SilexTools\Bootstrap\MethodBuilder;
use Motorphp\SilexTools\Components\Components;
use Motorphp\SilexTools\Components\Factory;
use Motorphp\SilexTools\NetteLibrary\BootstrapBuilderAdapter;
use Motorphp\SilexTools\NetteLibrary\Method\AbstractBuilder;

class MethodBuilderAdapter extends AbstractBuilder implements MethodBuilder
{
    /**
     * @var BootstrapBuilderAdapter
     */
    private $parent;

    /**
     * @var \ReflectionClass
     */
    private $containerType;

    public function __construct(BootstrapBuilderAdapter $parent)
    {
        $this->parent = $parent;
    }

    /**
     * @param \ReflectionMethod $signature
     * @return AbstractBuilder
     * @throws \ReflectionException
     */
    public function withSignature(\ReflectionMethod $signature): AbstractBuilder
    {
        parent::withSignature($signature); // TODO: Change the autogenerated stub
        $containerType = null;
        foreach ($signature->getParameters() as $parameter) {
            if ($parameter->getName() === 'container') {
                $containerType = $parameter->getType();
            }
        }

        if ($containerType && !$containerType->isBuiltin()) {
            $this->containerType = new \ReflectionClass($containerType->getName());
        }

        return $this;
    }

    function withComponents(Components $components): MethodBuilder
    {
        $writer = new MethodBodyWriter($this->containerType);
        $components->visit($writer);

        $methodBody = $writer->getMethodBody();
        parent::setMethodBody($methodBody);

        return $this;
    }

    function done(): BootstrapBuilder
    {
        return parent::configure($this->parent);
    }
}